{"version":3,"file":"module.js","mappings":"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","sources":["webpack://tls-grafana-datasource/external amd \"@grafana/data\"","webpack://tls-grafana-datasource/external amd \"@grafana/runtime\"","webpack://tls-grafana-datasource/external amd \"@grafana/ui\"","webpack://tls-grafana-datasource/external amd \"react\"","webpack://tls-grafana-datasource/webpack/bootstrap","webpack://tls-grafana-datasource/webpack/runtime/compat get default export","webpack://tls-grafana-datasource/webpack/runtime/define property getters","webpack://tls-grafana-datasource/webpack/runtime/hasOwnProperty shorthand","webpack://tls-grafana-datasource/webpack/runtime/make namespace object","webpack://tls-grafana-datasource/./types.ts","webpack://tls-grafana-datasource/./tlsDataSource.ts","webpack://tls-grafana-datasource/./components/const.ts","webpack://tls-grafana-datasource/./components/QueryEditor.tsx","webpack://tls-grafana-datasource/./module.ts","webpack://tls-grafana-datasource/./components/ConfigEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {DataSourceJsonData} from '@grafana/data';\nimport {DataQuery} from '@grafana/schema';\n\nexport interface TlsQuery extends DataQuery {\n    ycol?: string;\n    xcol?: string;\n    tls_query?: string;\n}\n\nexport const DEFAULT_QUERY: Partial<TlsQuery> = {\n    tls_query: \"*\",\n};\n\n/**\n * These are options configured for each DataSource instance\n */\nexport interface TlsDataSourceOptions extends DataSourceJsonData {\n    endpoint?: string;\n    region?: string;\n    topic?: string;\n    accessKeyId?: string;\n}\n\n/**\n * Value that is used in the backend, but never sent over HTTP to the frontend\n */\nexport interface TlsSecureJsonData {\n    accessKeySecret?: string;\n}\n","import { DataSourceInstanceSettings, CoreApp } from '@grafana/data';\nimport { DataSourceWithBackend } from '@grafana/runtime';\n\nimport { TlsQuery, TlsDataSourceOptions, DEFAULT_QUERY } from './types';\n\nexport class TlsDataSource extends DataSourceWithBackend<TlsQuery, TlsDataSourceOptions> {\n  constructor(instanceSettings: DataSourceInstanceSettings<TlsDataSourceOptions>) {\n    super(instanceSettings);\n  }\n\n  getDefaultQuery(_: CoreApp): Partial<TlsQuery> {\n    return DEFAULT_QUERY;\n  }\n}\n","export const xColInfoSeries = [\n    {\n        color: '#ff006e',\n        label: '空 empty',\n        value: '表格或日志 table or log',\n    },\n    {\n        color: '#80ed99',\n        label: '【时间列 Time colomn】',\n        value: '时序数据 Timeseries',\n    },\n    {\n        color: '#0077b6',\n        label: 'stat',\n        value: '单值图格式 gauge/stat graph',\n    },\n    {\n        color: '#0096c7',\n        label: 'pie',\n        value: '饼图格式 pie graph',\n    },\n    {\n        color: '#00b4d8',\n        label: 'bar',\n        value: '柱状图格式 bar graph',\n    },\n];\n\nexport const yColInfoSeries = [\n    {\n        color: '#ffca3a',\n        label: '【无需填写】 Log、表格全列展示',\n        value: '[No need to fill in] Log、table show all columns',\n    },\n    {\n        color: '#8ac926',\n        label: '【col1,col2,col3】 展示指定的数值列',\n        value: '[col1,col2,col3] Displaying specified columns',\n    },\n];\n\nexport const xSelectOptions = [\n    {\n        label: 'TimeSeries / Custom',\n        value: 'custom',\n        description: '时序数据 Timeseries 自定义【时间列 Time colomn】，或自定义x轴输入',\n    },\n    {label: 'Table / Log', value: 'table', description: '表格或日志 table or log'},\n    {label: 'Stat / Gauge', value: 'stat', description: '单值图格式 gauge/stat graph'},\n    {label: 'Pie', value: 'pie', description: '饼图格式 pie graph'},\n    {label: 'Bar', value: 'bar', description: '柱状图格式 bar graph'},\n]\n\nexport const version = (window as any)?.grafanaBootData?.settings?.buildInfo?.version ?? '';\n","import React, {ChangeEvent} from 'react';\nimport {Card, Icon, InlineField, InlineFormLabel, Input, Select, SeriesTable, Tooltip} from '@grafana/ui';\nimport {QueryEditorProps} from '@grafana/data';\nimport {TlsDataSource} from '../tlsDataSource';\nimport {TlsDataSourceOptions, TlsQuery} from '../types';\nimport {version, xColInfoSeries, xSelectOptions, yColInfoSeries} from \"./const\";\n\ntype Props = QueryEditorProps<TlsDataSource, TlsQuery, TlsDataSourceOptions>;\n\nexport function QueryEditor({query, onChange, onRunQuery}: Props) {\n    const onXChange = (event: ChangeEvent<HTMLInputElement>) => {\n        onChange({...query, xcol: event.target.value});\n    };\n\n    const onYChange = (event: ChangeEvent<HTMLInputElement>) => {\n        onChange({...query, ycol: event.target.value});\n        // executes the query\n        onRunQuery();\n    };\n    const onQueryChange = (event: ChangeEvent<HTMLInputElement>) => {\n        onChange({...query, tls_query: event.target.value});\n        onRunQuery();\n    };\n    const {ycol, xcol, tls_query} = query;\n\n    return (\n        <>\n            <div className=\"gf-form gf-form--grow flex-shrink-1 min-width-15\">\n                <InlineFormLabel width={6} className=\"query-keyword\">\n                    Query\n                </InlineFormLabel>\n                <div style={{width: '100%'}}>\n                    <Input onChange={onQueryChange} value={tls_query || ''}/>\n                </div>\n            </div>\n            <div className=\"gf-form-inline\">\n                <InlineField label=\"ycol\" labelWidth={12}>\n                    <Input\n                        onChange={onYChange}\n                        value={ycol || ''}\n                        width={40}\n                        prefix={<Icon name=\"text-fields\"/>}\n                        suffix={\n                            <Tooltip content={<SelectTips type=\"ycol\"/>} interactive theme=\"info-alt\">\n                                <Icon name=\"question-circle\"/>\n                            </Tooltip>\n                        }/>\n                </InlineField>\n                <InlineField label=\"xcol\" labelWidth={12}>\n                    <div style={{display: 'flex'}}>\n                        <Select\n                            width={20}\n                            menuShouldPortal\n                            options={xSelectOptions}\n                            value={onSelectChange(xcol ?? 'time')}\n                            onChange={(v) => {\n                                if (v.value !== 'custom') {\n                                    onChange({...query, xcol: v.value});\n                                    onRunQuery();\n                                } else {\n                                    onChange({...query, xcol: 'time'});\n                                }\n                            }}\n                            prefix={<Icon name=\"palette\"/>}\n                        />\n                        <Input onChange={onXChange}\n                               value={xcol || ''}\n                               width={40}\n                               prefix={<Icon name=\"x\"/>}\n                               suffix={\n                                   <Tooltip content={<SelectTips type=\"xcol\"/>} interactive theme=\"info-alt\">\n                                       <Icon name=\"question-circle\"/>\n                                   </Tooltip>\n                               }\n                        />\n\n                    </div>\n\n                </InlineField>\n            </div>\n        </>\n    );\n}\n\n\nexport function SelectTips(props: { type: string }) {\n    const isOld =\n        version === '' ||\n        version.startsWith('8.0') ||\n        version.startsWith('8.1') ||\n        version.startsWith('8.2') ||\n        version.startsWith('8.3') ||\n        version.startsWith('7');\n    const series = props.type === 'xcol' ? xColInfoSeries : yColInfoSeries;\n    return isOld ? (\n        <table>\n            {series.map((v, i) => {\n                return (\n                    <tr key={v.color}>\n                        <td style={{width: '45px'}}>{`${i + 1}.`}</td>\n                        <td>{v.label}</td>\n                        <td>{v.value}</td>\n                    </tr>\n                );\n            })}\n        </table>\n    ) : (\n        <Card>\n            <Card.Heading>{`${props.type} 简介 Introduction`}</Card.Heading>\n            <Card.Description>\n                <SeriesTable series={series}/>\n            </Card.Description>\n        </Card>\n    );\n}\n\nconst onSelectChange = (realXCol: string) => {\n    if (xSelectOptions.find((e) => e.value === realXCol)) {\n        return realXCol;\n    }\n    return 'custom';\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { TlsDataSource } from './tlsDataSource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport { TlsQuery, TlsDataSourceOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<TlsDataSource, TlsQuery, TlsDataSourceOptions>(TlsDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n","import React, {ChangeEvent} from 'react';\nimport {InlineField, Input, SecretInput} from '@grafana/ui';\nimport {DataSourcePluginOptionsEditorProps} from '@grafana/data';\nimport {TlsDataSourceOptions, TlsSecureJsonData} from '../types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TlsDataSourceOptions> {\n}\n\nexport function ConfigEditor(props: Props) {\n    const {onOptionsChange, options} = props;\n    const onEndpointChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const jsonData = {\n            ...options.jsonData,\n            endpoint: event.target.value,\n        };\n        onOptionsChange({...options, jsonData});\n    };\n\n    const onRegionChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const jsonData = {\n            ...options.jsonData,\n            region: event.target.value,\n        };\n        onOptionsChange({...options, jsonData});\n    };\n\n    const onTopicChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const jsonData = {\n            ...options.jsonData,\n            topic: event.target.value,\n        };\n        onOptionsChange({...options, jsonData});\n    };\n\n    const onAccessKeyChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const jsonData = {\n            ...options.jsonData,\n            accessKeyId: event.target.value,\n        };\n        onOptionsChange({...options, jsonData});\n    };\n\n    // Secure field (only sent to the backend)\n    const onSecretChange = (event: ChangeEvent<HTMLInputElement>) => {\n        onOptionsChange({\n            ...options,\n            secureJsonData: {\n                accessKeySecret: event.target.value,\n            },\n        });\n    };\n\n    const onResetSecret = () => {\n        onOptionsChange({\n            ...options,\n            secureJsonFields: {\n                ...options.secureJsonFields,\n                accessKeySecret: false,\n            },\n            secureJsonData: {\n                ...options.secureJsonData,\n                accessKeySecret: '',\n            },\n        });\n    };\n\n    const {jsonData, secureJsonFields} = options;\n    const secureJsonData = (options.secureJsonData || {}) as TlsSecureJsonData;\n\n    return (\n        <div className=\"gf-form-group\">\n            <InlineField label=\"Endpoint\" labelWidth={16}>\n                <Input\n                    onChange={onEndpointChange}\n                    value={jsonData.endpoint || ''}\n                    placeholder=\"https://tls-cn-beijing.volces.com\"\n                    width={65}\n                />\n            </InlineField>\n            <InlineField label=\"Region\" labelWidth={16}>\n                <Input\n                    onChange={onRegionChange}\n                    value={jsonData.region || ''}\n                    placeholder=\"cn-beijing\"\n                    width={65}\n                />\n            </InlineField>\n            <InlineField label=\"Topic\" labelWidth={16}>\n                <Input\n                    onChange={onTopicChange}\n                    value={jsonData.topic || ''}\n                    placeholder=\"\"\n                    width={65}\n                />\n            </InlineField>\n            <InlineField label=\"AccessKeyId\" labelWidth={16}>\n                <Input\n                    onChange={onAccessKeyChange}\n                    value={jsonData.accessKeyId || ''}\n                    placeholder=\"\"\n                    width={65}\n                />\n            </InlineField>\n            <InlineField label=\"AccessKeySecret\" labelWidth={16}>\n                <SecretInput\n                    isConfigured={(secureJsonFields && secureJsonFields.accessKeySecret) as boolean}\n                    value={secureJsonData.accessKeySecret || ''}\n                    placeholder=\"\"\n                    width={65}\n                    onReset={onResetSecret}\n                    onChange={onSecretChange}\n                />\n            </InlineField>\n        </div>\n    );\n}\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__959__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","DEFAULT_QUERY","tls_query","TlsDataSource","DataSourceWithBackend","getDefaultQuery","_","constructor","instanceSettings","super","window","xColInfoSeries","color","label","yColInfoSeries","xSelectOptions","description","version","grafanaBootData","settings","buildInfo","SelectTips","props","isOld","startsWith","series","type","table","map","v","i","tr","td","style","width","Card","Heading","Description","SeriesTable","plugin","DataSourcePlugin","setConfigEditor","onOptionsChange","options","jsonData","secureJsonFields","secureJsonData","div","className","InlineField","labelWidth","Input","onChange","event","endpoint","target","placeholder","region","topic","accessKeyId","SecretInput","isConfigured","accessKeySecret","onReset","setQueryEditor","query","onRunQuery","ycol","xcol","InlineFormLabel","prefix","Icon","name","suffix","Tooltip","content","interactive","theme","display","Select","menuShouldPortal","realXCol","find","e"],"sourceRoot":""}