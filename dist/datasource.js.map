{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","topic","jsonData","accessKey","secret","region","tlsConfig","tlsService","TLSService","options","targets","length","Promise","resolve","data","start","range","from","_d","getTime","end","to","query","buildSearchParameters","promise","queries","forEach","refId","target","body","req","searchLogs","then","result","Analysis","AnalysisResult","Data","Logs","err","reject","Error","JSON","stringify","logs","yValues","ycolumn","split","xcolumn","meta","_","push","text","item","rows","row","log","col","columns","xvalue","forOwn","value","key","includes","undefined","datapoints","sort","a","b","all","dataResult","requests","points","testDataSource","status","message","title","replace","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","doRequest","method","timeRange","unix","mapToTextValue","fieldName","Schema","map","d","headers","datasourceRequest","filter","scopedVars","replaceQueryParameters","mode","variable","multi","includeAll","v","label","join","isArray","re","reArray","match","old","sec","indexOf","parseInt","console"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport {TLSService} from \"./tls\"\n\nexport class GenericDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.topic = instanceSettings.jsonData.topic;\n        this.accessKey = instanceSettings.jsonData.accessKey;\n        this.secret = instanceSettings.jsonData.secret;\n        this.region = instanceSettings.jsonData.region;\n        this.tlsConfig = {\n            accessKey: this.accessKey,\n            secret: this.secret,\n            topic: this.topic,\n            url: this.url,\n            region: this.region,\n        }\n        this.tlsService = new TLSService(this.tlsConfig, this.backendSrv);\n    }\n\n    query(options) {\n        if (options.targets.length <= 0) {\n            return Promise.resolve({data: []});\n        }\n        const start = options.range.from._d.getTime();\n        const end = options.range.to._d.getTime();\n        const query = this.buildSearchParameters(options);\n        let promise = Promise.resolve();\n        const queries = []\n        _(query.targets).forEach(target => {\n            const refId = target.refId;\n            const body = {\n                'TopicId': this.tlsConfig.topic,\n                'Query': target.query,\n                'StartTime': start,\n                'EndTime': end,\n                'Limit': 1000,\n                'Sort': 'desc'\n            }\n            // 检索结果\n            const req = this.tlsService.searchLogs(body).then(function (result) {\n                // 分析和检索数据分开处理\n                if (result.data.Analysis) {\n                    return result.data.AnalysisResult.Data;\n                } else {\n                    return result.data.Logs;\n                }\n            }, function (err) {\n                if (err.data) {\n                    return Promise.reject(new Error(JSON.stringify(err.data)))\n                } else {\n                    return Promise.reject(new Error(\"unknown error\"))\n                }\n            }).then(function (logs) {\n                // x轴名称是table就表示返回表格数据，表格只有表头y轴\n                const yValues = {}\n                const ycolumn = target.ycolumn.split(\",\")\n                if (target.xcolumn === \"table\") {\n                    const meta = []\n                    _.forEach(ycolumn, item => {\n                        meta.push({text: item})\n                    })\n                    const rows = []\n                    _.forEach(logs, log => {\n                        const row = [];\n                        _.forEach(ycolumn, col => {\n                            row.push(log[col]);\n                        })\n                        rows.push(row);\n                    })\n                    yValues[refId] = {\n                        type: \"table\",\n                        columns: meta,\n                        rows: rows,\n                    };\n                } else {\n                    // x轴不是table就是曲线图\n                    const xcolumn = target.xcolumn;\n                    _.forEach(logs, log => {\n                        const xvalue = log[xcolumn];\n                        _.forOwn(log, function (value, key) {\n                            if (ycolumn.includes(key)) {\n                                if (yValues[key] === undefined) {\n                                    yValues[key] = {\n                                        refId: refId,\n                                        target: key,\n                                        datapoints: [\n                                            [log[key], xvalue]\n                                        ]\n                                    }\n                                } else {\n                                    yValues[key].datapoints.push([log[key], xvalue])\n                                }\n                            }\n                        })\n                    })\n                    // 按照时间戳升序排序\n                    _.forOwn(yValues, function (value, key) {\n                        value.datapoints.sort((a, b) => {\n                            if (a[1] < b[1]) {\n                                return -1;\n                            }\n                            if (a[1] > b[1]) {\n                                return 1;\n                            }\n                            return 0;\n                        });\n                    })\n                }\n                return yValues;\n            });\n            queries.push(req);\n        });\n        return Promise.all(queries).then(requests => {\n            const dataResult = []\n            _.forEach(requests, logs => {\n                _.forOwn(logs, function (points, key) {\n                    dataResult.push(points)\n                })\n            });\n            return {\n                data: dataResult\n            }\n        });\n    }\n\n    testDatasource() {\n        return this.tlsService.testDataSource().then(function (result) {\n            return {status: \"success\", message: \"tls Connection OK\", title: \"Success\"};\n        }, function (err) {\n            if (err.data) {\n                return {status: \"error\", message: JSON.stringify(err.data), title: \"Error\"};\n            } else {\n                return {status: \"error\", message: \"bad datasource params error\", title: \"Error\"};\n            }\n        });\n    }\n\n    annotationQuery(options) {\n        var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n        var annotationQuery = {\n            range: options.range,\n            annotation: {\n                name: options.annotation.name,\n                datasource: options.annotation.datasource,\n                enable: options.annotation.enable,\n                iconColor: options.annotation.iconColor,\n                query: query\n            },\n            rangeRaw: options.rangeRaw\n        };\n\n        return this.doRequest({\n            url: this.url + '/annotations',\n            method: 'POST',\n            data: annotationQuery\n        }).then(result => {\n            return result.data;\n        });\n    }\n\n    metricFindQuery(query) {\n        // 从topic中动态获取下拉菜单值\n        const q = this.templateSrv.replace(query, {}, 'glob');\n        const start = this.templateSrv.timeRange.from.unix() * 1000;\n        const end = this.templateSrv.timeRange.to.unix() * 1000;\n        const body = {\n            'TopicId': this.tlsConfig.topic,\n            'Query': q,\n            'StartTime': start,\n            'EndTime': end,\n            'Limit': 1000,\n            'Sort': 'desc'\n        }\n        return this.tlsService.searchLogs(body).then(this.mapToTextValue);\n    }\n\n    mapToTextValue(result) {\n        let fieldName = result.data.AnalysisResult.Schema[0];\n        return _.map(result.data.AnalysisResult.Data, (d) => {\n            return {text: d[fieldName], value: d[fieldName]};\n        });\n    }\n\n    doRequest(options) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n        return this.backendSrv.datasourceRequest(options);\n    }\n\n    buildSearchParameters(options) {\n        options.targets = _.filter(options.targets, target => {\n            return target.target !== 'select metric';\n        });\n\n        options.targets = _.map(options.targets, target => {\n            return {\n                target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n                refId: target.refId,\n                query: this.replaceQueryParameters(target, options),\n                xcolumn: this.templateSrv.replace(target.xcolumn, options.scopedVars, 'regex'),\n                ycolumn: this.templateSrv.replace(target.ycolumn, options.scopedVars, 'regex'),\n                mode: target.mode\n            };\n        });\n\n        return options;\n    }\n\n    replaceQueryParameters(target, options) {\n        if (typeof (target.query) == \"undefined\") {\n            target.query = \"\";\n        }\n        let query = this.templateSrv.replace(target.query, options.scopedVars, function (value, variable) {\n            if (typeof value == \"object\" && (variable.multi || variable.includeAll)) {\n                const a = [];\n                value.forEach(function (v) {\n                    if (variable.name == variable.label)\n                        a.push(variable.name + ':\"' + v + '\"');\n                    else\n                        a.push('\"' + v + '\"');\n                });\n                return a.join(\" OR \");\n            }\n            if (_.isArray(value)) {\n                return value.join(' OR ');\n            }\n            return value;\n        });\n        const re = /\\$([0-9]+)([dmhs])/g;\n        const reArray = query.match(re);\n        _(reArray).forEach(function (col) {\n            const old = col;\n            col = col.replace(\"$\", '');\n            let sec = 1000;\n            if (col.indexOf(\"s\") != -1)\n                sec = 1 * sec;\n            else if (col.indexOf(\"m\") != -1)\n                sec = 60 * sec;\n            else if (col.indexOf(\"h\") != -1)\n                sec = 3600 * sec;\n            else if (col.indexOf(\"d\") != -1)\n                sec = 3600 * 24 * sec;\n            col = col.replace(/[smhd]/g, '');\n            let v = parseInt(col);\n            v = v * sec;\n            console.log(old, v, col, sec, query);\n            query = query.replace(old, v);\n        });\n        return query;\n    }\n}\n\n"]}