{"version":3,"sources":["../../src/tls.js"],"names":["CryptoJS","util","crypto","hmac","key","string","HmacSHA256","sha256","data","SHA256","expiresHeader","unsignableHeaders","TLSService","tlsConfig","backendSrv","end","Date","now","start","body","topic","console","log","searchLogs","headers","accessKey","secret","region","AccessKey","SecretKey","ServiceName","Region","isVolcEngine","sessionToken","handleKeys","forEach","signObj","params","url","method","pathname","signer","AWSSignersV4","isVolcengine","addAuthorization","accessKeyId","secretAccessKey","Object","keys","request","datasourceRequest","uriEscape","str","encodeURIComponent","replace","escape","ch","charCodeAt","toString","toUpperCase","e","queryParamsToString","sort","map","val","escapedKey","Array","isArray","join","filter","v","serviceName","options","signatureCache","operation","signatureVersion","constant","algorithm","v4Identifier","dateHeader","tokenHeader","contentSha256Header","kDatePrefix","bodySha256","credentials","date","datetime","iso8601","addHeaders","authorization","URLSearchParams","JSON","stringify","parts","credString","credentialString","push","signedHeaders","signature","signingKey","getSigningKey","substring","signStr","stringToSign","canonicalString","hexEncodedHash","canonicalHeaders","hexEncodedBodyHash","a","b","toLowerCase","item","isSignableHeader","value","Error","canonicalHeaderValues","values","createScope","indexOf","undefined","toISOString","service","kDate","kRegion","kService"],"mappings":"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","file":"tls.js","sourcesContent":["import * as CryptoJS from './external/crypto-js';\n\nconst util = {\n    crypto: {\n        hmac: function hmac(key, string) {\n            return CryptoJS.HmacSHA256(string, key);\n        },\n\n        sha256: function sha256(data) {\n            return CryptoJS.SHA256(data);\n        },\n    },\n};\n\n/**\n * @api private\n */\nconst expiresHeader = 'presigned-expires';\n\nconst unsignableHeaders = [\n    'authorization',\n    'content-type',\n    'content-length',\n    'user-agent',\n    expiresHeader,\n    'expect',\n    'x-amzn-trace-id',\n];\n\nexport class TLSService {\n    constructor(tlsConfig, backendSrv) {\n        this.tlsConfig = tlsConfig;\n        this.backendSrv = backendSrv;\n    }\n\n    testDataSource() {\n        //最近15min数据进行检索\n        const end = Date.now();\n        const start = end - 15 * 60 * 1000;\n        const body = {\n            'TopicId': this.tlsConfig.topic,\n            'Query': '*',\n            'StartTime': start,\n            'EndTime': end,\n            'Limit': 100,\n            'Sort': 'desc'\n        }\n        console.log(\"test datasource data \", body)\n        return this.searchLogs(body)\n    }\n\n    searchLogs(body) {\n        const headers = {\n            'ServiceName': 'TLS',\n            'AccessKey': this.tlsConfig.accessKey,\n            'SecretKey': this.tlsConfig.secret,\n            'Accept': '*/*',\n            'Region': this.tlsConfig.region,\n        };\n        const {\n            AccessKey,\n            SecretKey,\n            ServiceName,\n            Region,\n            isVolcEngine = 'true',\n            'X-Security-Token': sessionToken,\n        } = headers;\n\n        // 经过处理的header 不再透传\n        const handleKeys = [\n            'AccessKey',\n            'SecretKey',\n            'ServiceName',\n            'Region',\n            'isVolcEngine',\n            'X-Security-Token',\n        ];\n        handleKeys.forEach((key) => {\n            delete headers[key];\n        });\n\n        // 构造签名对象\n        const signObj = {\n            region: Region,\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': '*/*',\n            }, // 默认不签名用户传递的headers 防止tlb改header导致的签名错误 本代码用于开发自测 这部分安全性可以忽略\n            params: {},\n            url: this.tlsConfig.url,\n            method: 'POST',\n            pathname: '/SearchLogs',\n            body: body,\n        };\n        // 执行签名\n        const signer = new AWSSignersV4(signObj, ServiceName, {\n            isVolcengine: isVolcEngine !== 'false',\n        });\n        signer.addAuthorization({\n            accessKeyId: AccessKey,\n            secretAccessKey: SecretKey,\n            sessionToken,\n        });\n\n        // 将签名后的headers注入到请求的headers中\n        Object.keys(signer.request.headers).forEach((key) => {\n            signObj.headers[key] = signer.request.headers[key]\n        });\n        const url = `${signObj.url}${signObj.pathname}`;\n        return this.backendSrv.datasourceRequest({\n            headers: signObj.headers,\n            url: url,\n            method: 'POST',\n            data: body\n        })\n    }\n}\n\nconst uriEscape = (str) => {\n    try {\n        return encodeURIComponent(str)\n            .replace(/[^A-Za-z0-9_.~\\-%]+/g, escape)\n            .replace(\n                /[*]/g,\n                (ch) => `%${ch.charCodeAt(0).toString(16).toUpperCase()}`\n            );\n    } catch (e) {\n        return '';\n    }\n};\n\nconst queryParamsToString = (params, sort = true) =>\n    (sort ? Object.keys(params).sort() : Object.keys(params))\n        .map((key) => {\n            const val = params[key];\n            if (typeof val === 'undefined' || val === null) {\n                return;\n            }\n\n            const escapedKey = uriEscape(key);\n            if (!escapedKey) {\n                return;\n            }\n\n            if (Array.isArray(val)) {\n                return `${escapedKey}=${val\n                    .map(uriEscape)\n                    .sort()\n                    .join(`&${escapedKey}=`)}`;\n            }\n\n            return `${escapedKey}=${uriEscape(val)}`;\n        })\n        .filter((v) => v)\n        .join('&');\n\nclass AWSSignersV4 {\n    constructor(request, serviceName, options) {\n        this.request = request;\n        this.request.headers = request.headers || {};\n        this.serviceName = serviceName;\n        options = options || {};\n        this.signatureCache =\n            typeof options.signatureCache === 'boolean'\n                ? options.signatureCache\n                : true;\n        this.operation = options.operation;\n        this.signatureVersion = options.signatureVersion;\n        this.constant = options.isVolcengine\n            ? {\n                algorithm: 'HMAC-SHA256',\n                v4Identifier: 'request',\n                dateHeader: 'X-Date',\n                tokenHeader: 'x-security-token',\n                contentSha256Header: 'X-Content-Sha256',\n                kDatePrefix: '',\n            }\n            : {\n                algorithm: 'AWS4-HMAC-SHA256',\n                v4Identifier: 'aws4_request',\n                dateHeader: 'X-Amz-Date',\n                tokenHeader: 'x-amz-security-token',\n                contentSha256Header: 'X-Amz-Content-Sha256',\n                kDatePrefix: 'AWS4',\n            };\n        this.bodySha256 = options.bodySha256;\n    }\n\n    addAuthorization(credentials, date) {\n        const datetime = this.iso8601(date).replace(/[:\\-]|\\.\\d{3}/g, '');\n        this.addHeaders(credentials, datetime);\n        this.request.headers['Authorization'] = this.authorization(\n            credentials,\n            datetime\n        );\n    }\n\n    getAuthorization(credentials, date) {\n        const datetime = this.iso8601(date).replace(/[:\\-]|\\.\\d{3}/g, '');\n        this.addHeaders(credentials, datetime);\n        return this.authorization(\n            credentials,\n            datetime);\n    }\n\n    addHeaders(credentials, datetime) {\n        this.request.headers[this.constant.dateHeader] = datetime;\n        if (credentials.sessionToken) {\n            this.request.headers[this.constant.tokenHeader] =\n                credentials.sessionToken;\n        }\n        if (this.request.body) {\n            let body = this.request.body;\n            if (typeof body !== 'string') {\n                if (body instanceof URLSearchParams) {\n                    body = body.toString();\n                } else {\n                    body = JSON.stringify(body);\n                }\n            }\n            this.request.headers[this.constant.contentSha256Header] =\n                this.bodySha256 || util.crypto.sha256(body).toString();\n        }\n    }\n\n    authorization(credentials, datetime) {\n        const parts = [];\n        const credString = this.credentialString(datetime);\n        parts.push(\n            `${this.constant.algorithm} Credential=${credentials.accessKeyId}/${credString}`\n        );\n        parts.push(`SignedHeaders=${this.signedHeaders()}`);\n        const signature = this.signature(credentials, datetime);\n        parts.push(`Signature=${signature}`);\n        return parts.join(', ');\n    }\n\n    signature(credentials, datetime) {\n        const signingKey = this.getSigningKey(\n            credentials,\n            datetime.substring(0, 8),\n            this.request.region,\n            this.serviceName,\n            this.signatureCache\n        );\n        const signStr = this.stringToSign(datetime);\n        return util.crypto.hmac(signingKey, signStr, 'hex');\n    }\n\n    stringToSign(datetime) {\n        const parts = [];\n        parts.push(this.constant.algorithm);\n        parts.push(datetime);\n        parts.push(this.credentialString(datetime));\n        const canonicalString = this.canonicalString();\n        parts.push(this.hexEncodedHash(canonicalString));\n\n        return parts.join('\\n');\n    }\n\n    canonicalString() {\n        const parts = [],\n            pathname = this.request.pathname || '/';\n\n        parts.push(this.request.method.toUpperCase());\n        parts.push(pathname);\n        parts.push(queryParamsToString(this.request.params) || '');\n        parts.push(`${this.canonicalHeaders()}\\n`);\n        parts.push(this.signedHeaders());\n        parts.push(this.hexEncodedBodyHash());\n        return parts.join('\\n');\n    }\n\n    canonicalHeaders() {\n        const headers = [];\n        Object.keys(this.request.headers).forEach((key) => {\n            headers.push([key, this.request.headers[key]]);\n        });\n        headers.sort((a, b) => (a[0].toLowerCase() < b[0].toLowerCase() ? -1 : 1));\n        const parts = [];\n        headers.forEach((item) => {\n            const key = item[0].toLowerCase();\n            if (this.isSignableHeader(key)) {\n                const value = item[1];\n                if (\n                    typeof value === 'undefined' ||\n                    value === null ||\n                    typeof value.toString !== 'function'\n                ) {\n                    throw new Error(`Header ${key} contains invalid value`);\n                }\n                parts.push(`${key}:${this.canonicalHeaderValues(value.toString())}`);\n            }\n        });\n        return parts.join('\\n');\n    }\n\n    canonicalHeaderValues(values) {\n        return values.replace(/\\s+/g, ' ').replace(/^\\s+|\\s+$/g, '');\n    }\n\n    signedHeaders() {\n        const keys = [];\n        Object.keys(this.request.headers).forEach((key) => {\n            key = key.toLowerCase();\n            if (this.isSignableHeader(key)) {\n                keys.push(key);\n            }\n        });\n        return keys.sort().join(';');\n    }\n\n    credentialString(datetime) {\n        return this.createScope(\n            datetime.substring(0, 8),\n            this.request.region,\n            this.serviceName\n        );\n    }\n\n    hexEncodedHash(string) {\n        return util.crypto.sha256(string);\n    }\n\n    hexEncodedBodyHash() {\n        if (this.request.headers[this.constant.contentSha256Header]) {\n            return this.request.headers[this.constant.contentSha256Header];\n        }\n\n        if (this.request.body) {\n            return this.hexEncodedHash(queryParamsToString(this.request.body));\n        }\n        return this.hexEncodedHash('');\n    }\n\n    isSignableHeader(key) {\n        if (key.toLowerCase().indexOf('x-amz-') === 0) {\n            return true;\n        }\n        return unsignableHeaders.indexOf(key) < 0;\n    }\n\n    iso8601(date) {\n        if (date === undefined) {\n            date = new Date();\n        }\n        return date.toISOString().replace(/\\.\\d{3}Z$/, 'Z');\n    }\n\n    getSigningKey(credentials, date, region, service) {\n\n        const kDate = util.crypto.hmac(\n            `${this.constant.kDatePrefix}${credentials.secretAccessKey}`,\n            date\n        );\n        // debugger;\n        const kRegion = util.crypto.hmac(kDate, region);\n        const kService = util.crypto.hmac(kRegion, service);\n\n        const signingKey = util.crypto.hmac(kService, this.constant.v4Identifier);\n\n        return signingKey;\n    }\n\n    createScope(date, region, serviceName) {\n        return [\n            date.substring(0, 8),\n            region,\n            serviceName,\n            this.constant.v4Identifier,\n        ].join('/');\n    }\n}\n\n"]}