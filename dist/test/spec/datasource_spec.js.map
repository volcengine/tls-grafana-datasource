{"version":3,"sources":["../../../spec/datasource_spec.js"],"names":["describe","ctx","beforeEach","$q","Q","backendSrv","templateSrv","ds","Datasource","it","done","query","targets","then","result","expect","data","to","have","length","datasourceRequest","request","when","_request","target","datapoints","replace","series","equal","metricFindQuery","text","value","mapToTextValue","a","b","getTagKeys","type","key","getTagValues"],"mappings":"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","file":"datasource_spec.js","sourcesContent":["import {Datasource} from \"../module\";\nimport Q from \"q\";\n\ndescribe('GenericDatasource', function() {\n    var ctx = {};\n\n    beforeEach(function() {\n        ctx.$q = Q;\n        ctx.backendSrv = {};\n        ctx.templateSrv = {};\n        ctx.ds = new Datasource({}, ctx.$q, ctx.backendSrv, ctx.templateSrv);\n    });\n\n    it('should return an empty array when no targets are set', function(done) {\n        ctx.ds.query({targets: []}).then(function(result) {\n            expect(result.data).to.have.length(0);\n            done();\n        });\n    });\n\n    it('should return the server results when a target is set', function(done) {\n        ctx.backendSrv.datasourceRequest = function(request) {\n            return ctx.$q.when({\n                _request: request,\n                data: [\n                    {\n                        target: 'X',\n                        datapoints: [1, 2, 3]\n                    }\n                ]\n            });\n        };\n\n        ctx.templateSrv.replace = function(data) {\n            return data;\n        }\n\n        ctx.ds.query({targets: ['hits']}).then(function(result) {\n            expect(result._request.data.targets).to.have.length(1);\n\n            var series = result.data[0];\n            expect(series.target).to.equal('X');\n            expect(series.datapoints).to.have.length(3);\n            done();\n        });\n    });\n\n    it ('should return the metric results when a target is null', function(done) {\n        ctx.backendSrv.datasourceRequest = function(request) {\n            return ctx.$q.when({\n                _request: request,\n                data: [\n                    \"metric_0\",\n                    \"metric_1\",\n                    \"metric_2\",\n                ]\n            });\n        };\n\n        ctx.templateSrv.replace = function(data) {\n            return data;\n        }\n\n        ctx.ds.metricFindQuery({target: null}).then(function(result) {\n            expect(result).to.have.length(3);\n            expect(result[0].text).to.equal('metric_0');\n            expect(result[0].value).to.equal('metric_0');\n            expect(result[1].text).to.equal('metric_1');\n            expect(result[1].value).to.equal('metric_1');\n            expect(result[2].text).to.equal('metric_2');\n            expect(result[2].value).to.equal('metric_2');\n            done();\n        });\n    });\n\n    it ('should return the metric target results when a target is set', function(done) {\n        ctx.backendSrv.datasourceRequest = function(request) {\n            var target = request.data.target;\n            var result = [target + \"_0\", target + \"_1\", target + \"_2\"];\n\n            return ctx.$q.when({\n                _request: request,\n                data: result\n            });\n        };\n\n        ctx.templateSrv.replace = function(data) {\n            return data;\n        }\n\n        ctx.ds.metricFindQuery('search').then(function(result) {\n            expect(result).to.have.length(3);\n            expect(result[0].text).to.equal('search_0');\n            expect(result[0].value).to.equal('search_0');\n            expect(result[1].text).to.equal('search_1');\n            expect(result[1].value).to.equal('search_1');\n            expect(result[2].text).to.equal('search_2');\n            expect(result[2].value).to.equal('search_2');\n            done();\n        });\n    });\n\n    it ('should return the metric results when the target is an empty string', function(done) {\n        ctx.backendSrv.datasourceRequest = function(request) {\n            return ctx.$q.when({\n                _request: request,\n                data: [\n                    \"metric_0\",\n                    \"metric_1\",\n                    \"metric_2\",\n                ]\n            });\n        };\n\n        ctx.templateSrv.replace = function(data) {\n            return data;\n        }\n\n        ctx.ds.metricFindQuery('').then(function(result) {\n            expect(result).to.have.length(3);\n            expect(result[0].text).to.equal('metric_0');\n            expect(result[0].value).to.equal('metric_0');\n            expect(result[1].text).to.equal('metric_1');\n            expect(result[1].value).to.equal('metric_1');\n            expect(result[2].text).to.equal('metric_2');\n            expect(result[2].value).to.equal('metric_2');\n            done();\n        });\n    });\n\n    it ('should return the metric results when the args are an empty object', function(done) {\n        ctx.backendSrv.datasourceRequest = function(request) {\n            return ctx.$q.when({\n                _request: request,\n                data: [\n                    \"metric_0\",\n                    \"metric_1\",\n                    \"metric_2\",\n                ]\n            });\n        };\n\n        ctx.templateSrv.replace = function(data) {\n            return data;\n        }\n\n        ctx.ds.metricFindQuery().then(function(result) {\n            expect(result).to.have.length(3);\n            expect(result[0].text).to.equal('metric_0');\n            expect(result[0].value).to.equal('metric_0');\n            expect(result[1].text).to.equal('metric_1');\n            expect(result[1].value).to.equal('metric_1');\n            expect(result[2].text).to.equal('metric_2');\n            expect(result[2].value).to.equal('metric_2');\n            done();\n        });\n    });\n\n    it ('should return the metric target results when the args are a string', function(done) {\n        ctx.backendSrv.datasourceRequest = function(request) {\n            var target = request.data.target;\n            var result = [target + \"_0\", target + \"_1\", target + \"_2\"];\n\n            return ctx.$q.when({\n                _request: request,\n                data: result\n            });\n        };\n\n        ctx.templateSrv.replace = function(data) {\n            return data;\n        }\n\n        ctx.ds.metricFindQuery('search').then(function(result) {\n            expect(result).to.have.length(3);\n            expect(result[0].text).to.equal('search_0');\n            expect(result[0].value).to.equal('search_0');\n            expect(result[1].text).to.equal('search_1');\n            expect(result[1].value).to.equal('search_1');\n            expect(result[2].text).to.equal('search_2');\n            expect(result[2].value).to.equal('search_2');\n            done();\n        });\n    });\n\n    it ('should return data as text and as value', function(done) {\n        var result = ctx.ds.mapToTextValue({data: [\"zero\", \"one\", \"two\"]});\n\n        expect(result).to.have.length(3);\n        expect(result[0].text).to.equal('zero');\n        expect(result[0].value).to.equal('zero');\n        expect(result[1].text).to.equal('one');\n        expect(result[1].value).to.equal('one');\n        expect(result[2].text).to.equal('two');\n        expect(result[2].value).to.equal('two');\n        done();\n    });\n\n    it ('should return text as text and value as value', function(done) {\n        var data = [\n            {text: \"zero\", value: \"value_0\"},\n            {text: \"one\", value: \"value_1\"},\n            {text: \"two\", value: \"value_2\"},\n        ];\n\n        var result = ctx.ds.mapToTextValue({data: data});\n\n        expect(result).to.have.length(3);\n        expect(result[0].text).to.equal('zero');\n        expect(result[0].value).to.equal('value_0');\n        expect(result[1].text).to.equal('one');\n        expect(result[1].value).to.equal('value_1');\n        expect(result[2].text).to.equal('two');\n        expect(result[2].value).to.equal('value_2');\n        done();\n    });\n\n    it ('should return data as text and index as value', function(done) {\n        var data = [\n            {a: \"zero\", b: \"value_0\"},\n            {a: \"one\", b: \"value_1\"},\n            {a: \"two\", b: \"value_2\"},\n        ];\n\n        var result = ctx.ds.mapToTextValue({data: data});\n\n        expect(result).to.have.length(3);\n        expect(result[0].text).to.equal(data[0]);\n        expect(result[0].value).to.equal(0);\n        expect(result[1].text).to.equal(data[1]);\n        expect(result[1].value).to.equal(1);\n        expect(result[2].text).to.equal(data[2]);\n        expect(result[2].value).to.equal(2);\n        done();\n    });\n\n    it('should support tag keys', function(done) {\n        var data =  [{'type': 'string', 'text': 'One', 'key': 'one'}, {'type': 'string', 'text': 'two', 'key': 'Two'}];\n\n        ctx.backendSrv.datasourceRequest = function(request) {\n            return ctx.$q.when({\n                _request: request,\n                data: data\n            });\n        };\n\n        ctx.ds.getTagKeys().then(function(result) {\n            expect(result).to.have.length(2);\n            expect(result[0].type).to.equal(data[0].type);\n            expect(result[0].text).to.equal(data[0].text);\n            expect(result[0].key).to.equal(data[0].key);\n            expect(result[1].type).to.equal(data[1].type);\n            expect(result[1].text).to.equal(data[1].text);\n            expect(result[1].key).to.equal(data[1].key);\n            done();\n        });\n    });\n\n    it('should support tag values', function(done) {\n        var data =  [{'key': 'eins', 'text': 'Eins!'}, {'key': 'zwei', 'text': 'Zwei'}, {'key': 'drei', 'text': 'Drei!'}];\n\n        ctx.backendSrv.datasourceRequest = function(request) {\n            return ctx.$q.when({\n                _request: request,\n                data: data\n            });\n        };\n\n        ctx.ds.getTagValues().then(function(result) {\n            expect(result).to.have.length(3);\n            expect(result[0].text).to.equal(data[0].text);\n            expect(result[0].key).to.equal(data[0].key);\n            expect(result[1].text).to.equal(data[1].text);\n            expect(result[1].key).to.equal(data[1].key);\n            expect(result[2].text).to.equal(data[2].text);\n            expect(result[2].key).to.equal(data[2].key);\n            done();\n        });\n    });\n\n});\n"]}